package comprehensive;

public class CompTimer {

	final static int TIMES_TO_LOOP = 1000;
	final static int problemSize = 20000;
	
	/**
	 * Running times while increasing the number of phrases generated, for the same medium-sized input grammar.
	 */
	public static void main (String[] args) {
		testNumberOfPhrases(); 
		
	}

	
	private static String testNumberOfPhrases()
	{		
		long startTime, midpointTime, stopTime = System.nanoTime();

		// First, spin computing stuff until one second has gone by.
		// This allows this thread to stabilize.
		startTime = System.nanoTime();
		while (System.nanoTime() - startTime < 1000000000) { 
			// empty block
		}

		// Now, run the test.
		startTime = System.nanoTime();

		for(int j = 0; j < TIMES_TO_LOOP; j++)
		{
			String[] args = new String[TIMES_TO_LOOP];
			args[0] = "./mathematical_expression.g";
			args[1] = "TIMES_TO_LOOP";
			RandomPhraseGenerator.main(args);
		}

		midpointTime = System.nanoTime();

		// Run a loop to capture the cost of running the "timesToLoop" loop and
		// generating a random ISBN.
		
		for(int j = 0; j < TIMES_TO_LOOP; j++)
		{
		}
		stopTime = System.nanoTime();

		// Compute the time, subtract the cost of running the loop
		// from the cost of running the loop and doing the lookups.
		// Average it over the number of runs.
		double averageTime = (double) ((midpointTime - startTime) - (stopTime - midpointTime))
				/ (TIMES_TO_LOOP);
		System.out.println("Time " + averageTime);
		return averageTime + "";
		
		
	}
}
